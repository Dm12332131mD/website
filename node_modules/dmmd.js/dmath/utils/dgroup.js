"use strict";

// Imports
const abs = require("../functions/absolute.js");
const format = require("./format.js");
const neg = require("../functions/negative.js");
const parse = require("./parse.js");
const shift = require("./shift.js");

/**
 * Divides two number-like values and returns the quotient and modulus
 * @param {string|number} a Number-like value
 * @param {string|number} b Number-like value
 * @param {string|number} b Decimal place
 * @returns {{ quotient: string, modulus: string }}
 */
function dgroup(a, b, d) {
    let multiply = require("../operators/multiply.js");
    let subtract = require("../operators/subtract.js");
    let [ fla, flb, fld ] = [ a, b, d ].map(parseFloat);
    if(flb === 0) throw new Error("Cannot divide by 0");
    if(fld < 0) throw new Error("Invalid decimal place");
    if(fla < 0 && flb < 0) return dgroup(abs(a), abs(b), d);
    else if(fla < 0 || fla < 0) return neg(dgroup(abs(a), abs(b), d));
    let { array: [ dsa, dsb ], length: fl } = format([ a, b ].map(parse), false);
    let daa = shift(dsa, -d).split(""), r = "", m = "0";
    while(daa.length) {
        m += daa.shift();
        for(let i = 9; i >= 0; i--) {
            if(parseInt(m) < parseInt(multiply(dsb, i))) continue;
            r += `${i}`, m = subtract(m, multiply(dsb, i));
            break;
        };
        if(daa.every(v => v === "0") && m === "0") break;
    };
    return { quotient: shift(r, d - daa.length), modulus: shift(m, fl + d) };
};

// Exports
module.exports = dgroup;